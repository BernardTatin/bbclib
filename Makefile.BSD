# Makefile

# base_cc = gcc48
base_cc ?= clang
debug ?= no

CC = $(base_cc)
LD = $(base_cc)

.if $(base_cc) == gcc48
STD_WARNINGS = -Wall -Wextra -pedantic -std=c11
.elif $(base_cc)
STD_WARNINGS = -ftrapv -Weverything -std=c11
.endif

.if $(debug) == yes
STD_WARNINGS += -g -O0
VALGRIND_OPTIONS = --suppressions=/usr/pbi/valgrind-amd64/local/lib/valgrind/default.supp
.else
STD_WARNINGS += -g0 -O2
.endif

STD_INCLUDES = -Iinclude -Itests -Istructures

ODIR = objs

_os != uname
.if $(_os) == Windows_NT
	_exe = .exe
.endif

STRUCTURES != ls structures/*.c
SOURCES != ls src/*.c
TESTS != ls tests/*.c

_STOBJS1 = ${STRUCTURES:T}
STOBJS = ${_STOBJS1:S/c$/o/g}

_SOBJS1 = ${SOURCES:T}
SOBJS = ${_SOBJS1:S/c$/o/g}

_TOBJS1 = ${TESTS:T}
TOBJS = ${_TOBJS1:S/c$/o/g}

OBJS = $(SOBJS) $(TOBJS) $(STOBJS)

CFLAGS =  $(STD_INCLUDES) $(STD_WARNINGS)

EXE = bbclib-test$(_exe).BSD

.SUFFIXES: .c .o

$(STOBJS)        : structures/$(.PREFIX).c
	$(CC) $(CFLAGS) -c structures/$(.PREFIX).c

$(SOBJS)         : src/$(.PREFIX).c
	$(CC) $(CFLAGS) -c src/$(.PREFIX).c

$(TOBJS)         : tests/$(.PREFIX).c
	$(CC) $(CFLAGS) -c tests/$(.PREFIX).c

Debug: all

Release: all

all: _odir $(EXE)
        @echo "OS : $(_os)"

cleanDebug: clean

cleanRelease: clean

clean:
	@echo "TOBJS <$(TOBJS)>"
	@echo "SOBJS <$(SOBJS)>"
	-rm -fv $(EXE) $(OBJS)

_odir: $(ODIR)

$(ODIR):
	@echo "TOBJS <$(TOBJS)>"
	@echo "SOBJS <$(SOBJS)>"
	mkdir -p $@

$(EXE): $(OBJS)
	$(LD) -o $(.TARGET) $(.ALLSRC) $(LD_FLAGS)

tests: $(EXE)
.if $(debug) == yes
	valgrind $(VALGRIND_OPTIONS) --leak-check=full ./$(EXE) --bin > /dev/null
	valgrind $(VALGRIND_OPTIONS) --tool=cachegrind ./$(EXE) --bin > /dev/null
	valgrind $(VALGRIND_OPTIONS) --tool=exp-sgcheck ./$(EXE) --bin > /dev/null
.else
	./$(EXE) --ref > bsd-ref.log
	./$(EXE) --test > bsd-test.log
	./$(EXE) --bin
	diff bsd-test.log bsd-ref.log
.endif

