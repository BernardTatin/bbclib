\part{du code standard}
Ce code doit être capable de supporter le plus grand nombre posible de compilateurs et de machines. [[standard.h]] est fait pour ça.

\section{généralités}
Tout d'abord, on gère la compatibilité avec le standard \emph{C11} :

<<standard>>=
#if defined(__WATCOMC__)
#define no_c11
#define with_watcominline
#elif defined(_MSC_VER)
#define no_c11
#elif defined(__TURBOC__)
#define no_c11
#endif

@ %def no_c11, with_watcominline

\section{les types booléens et entiers}
\emph{C11} défini de nombreux types supplémentaires qu'il faut absolument utiliser :

<<standard>>=
#ifndef no_c11
  #include <stdbool.h>
  #include <stdint.h>
#else
typedef enum {
        false = 0,
        true = 1
} bool;

typedef char int8_t;
typedef unsigned char uint8_t;
typedef short int16_t;
typedef unsigned short uint16_t;
typedef long int32_t;
typedef unsigned long uint32_t;

typedef unsigned int size_t;

#ifndef no_inline
  #define no_inline
#endif
#endif
@

\section{le code final}
\subsection{standard.h}
<<standard.h>>=
/*
 * _standard.h
 * generated by noweb
 */
#ifndef INCLUDE__COMPAT__STANDARD_H_
#define INCLUDE__COMPAT__STANDARD_H_

#include <stdlib.h>
#include <stdarg.h>

<<type-bool>>

<<define-inline>>

#endif /* INCLUDE__COMPAT__STANDARD_H_ */
@
