\part{du code standard}
Ce code doit être capable de supporter le plus grand nombre posible de compilateurs et de machines. [[standard.h]] est fait pour ça.

\section{généralités}
Tout d'abord, on gère la compatibilité avec le standard \emph{C11} :

<<standard-types>>=
#if defined(__WATCOMC__)
#define no_c11
#define with_watcominline
#elif defined(_MSC_VER)
#define no_c11
#elif defined(__TURBOC__)
#define no_c11
#endif

@ %def no_c11, with_watcominline

\section{les types booléens et entiers}
\emph{C11} défini de nombreux types supplémentaires qu'il faut absolument utiliser :

<<standard-types>>=
#ifndef no_c11
  #include <stdbool.h>
  #include <stdint.h>
#else
typedef enum {
        false = 0,
        true = 1
} bool;

typedef char int8_t;
typedef unsigned char uint8_t;
typedef short int16_t;
typedef unsigned short uint16_t;
typedef long int32_t;
typedef unsigned long uint32_t;

typedef unsigned int size_t;

#ifndef no_inline
  #define no_inline
#endif
#endif
@
\section{les modificateurs}
\subsection{inline}
Certaines fonctions sont [[inline]]. La diversité des compilateurs nous obligent à définir un [[INLINE]] ainsi (et nous ne couvrons pas tous les cas, loin de là):
<<define-inline>>=
#if defined(with_watcominline)
        #define INLINE __inline
#elif !defined(no_inline)
        #define INLINE inline
#else
        #define INLINE
#endif
@ %def INLINE
\subsection{volatile}
Des membres de structure ainsi que des variables sont définis comme [[volatile int]]. C'est important dans un système embarqué avec des interruptions pouvant manipuler le buffer. Sans [[volatile]], une optimisation trop agressive pourrait placer une des valeurs entières dans un registre. En cas d'interruption modifiant cette valeur, le registre, lui, ne bougera pas et des caractères pourraient se perdre.
On pourrait définir un [[VOLATILE]] en fonction de l'architecture du type :

<<define-volatile>>=

#if defined(__with_irqs)
  #define VOLATILE volatile
#else
  #define VOLATILE
#endif

@ %def __with_irqs, VOLATILE
Quoiqu'il en soit, il est fortement recommandé de lire la définition exacte du [[VOLATILE]] de votre compilateur, certaines variations pouvant rendre votre code totalement inefficace. Et d'autant plus que votre compilateur cible un système embarqué où les variations autour des standards sont choses communes.

Cependant, nous ne résolvons pas tous les problèmes, en particuliers ceux du \emph{multi-threading} qui sont laissés à l'utilisateur dans cette version.

\subsection{INT, l'entier universel}
Le type [[int]] permet d'utiliser le type entier offrant en général le meilleur compromis vitesse/taille. Mais ce n'est pas toujours vrai, tout dépend de l'architecture du processeur et des choix des concepteurs du compilateur. On va donc utiliser un [[define]] ce qui autorise la définition sur la igne de commande du compilateur, contrairement au [[typedef]]:

<<define-int>>=

#if !defined(INT)
#define INT int
#endif
@ %def INT

\section{le code final}
\subsection{standard.h}
<<standard.h>>=
/*
 * _standard.h
 * generated by noweb
 */
#ifndef INCLUDE__COMPAT__STANDARD_H_
#define INCLUDE__COMPAT__STANDARD_H_

#include <stdlib.h>
#include <stdarg.h>
#include <string.h>

<<standard-types>>

<<define-inline>>
<<define-volatile>>
<<define-int>>

#endif /* INCLUDE__COMPAT__STANDARD_H_ */
@
